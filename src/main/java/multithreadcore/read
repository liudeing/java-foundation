Java多线程核心编程
Thread类的构造函数（Thread(Runnable target）说明不光可以传入Runnable接口对象，还可以传入一个Thread类对象，这样做完全可以将一个Thread
对象中的run()方法交由其他线程使用。
isAlive()方法的作用是测试线程是否处于活动状态，即线程已经启动，尚未终止。
sleep()方法的作用是在指定的毫秒数内让当前“正在执行的线程”休眼（暂停执行），正在执行的线程是this.currentThread()返回的线程。
start()方法是异步执行，交给线程规划器来调度。run()方法是用main主线程来调用run()方法，是同步，也就是必须在run()方法中的代码执行完毕后才能执
行后面的代码。
线程停止：
1）使用退出标志，使线程正常退出，也就是当run()方法完成后线程终止（弊端：阻塞执行不了标志位代码）
2）使用stop()方法强制中止线程，不推荐使用，因为stop,suspend,resume都是作废的方法，suspend和resume是独占，使其它线程无法访问，线程暂停，
造成数据不同步。因为使用它们会抛出ThreadDeath线程异常，释放锁，不可控。因为和run()方法都是同步的，会争抢锁
（释放锁的条件1，同步块执行完;2，线程异常;3，执行了锁对象的wait()方法）
3）使用interrupt方法中断线程。实际上也是设置中断标志为true,发出中断信号，线程在合适时刻中断自己。
{
1,阻塞库响应中断，Thread.sleep(),Object.wait(),BlockingQueue.put()/take(),Thread.join(),不可响应的中断包括同步IO,InputStream.
read()和OutStream.write(),异步IO如Selector.select(),等待获取某个内置锁。
2,在代码中轮询中断状态。this.isInterrupted()
3,Future.cancel(),也是调用的interrupt方法。
}
抛出异常throw new InterruptedException();可让线程停止，catch还可以向上抛出异常，让事件传播。
线程池关闭，ExecutorService提供了shutdown和shutdownNow
中断interrupted(),中断当前线程main线程，具有清除中断状态的功能，如果连续两次调用。是静态方法。
isInterrupted(), 是非静态的。测试对象是否是中断状态，但不清除中断状态。
可以用for来判断(this.interrupted()),但for后面的语句还是会执行。
yield()方法是放弃CPU资源
守护线程。典型应用是垃圾回收线程。

方法内部的变量线程安全，是属于方法的私有变量。
如果多个线程访问一个对象的实例变量就有可能出现非线程安全的问题
关键字synchronized取得的都是对象锁，而不是把一段代码或方法（函数）当作锁
发生脏读（dirtyRead）的情况就是在读取值的时候，些值已经被其他对象修改过了。
可重入锁的概念是：自己可以再次获得自己内部的锁。
异常会释放锁，synchronized同步块可让其他线程进入。
同步不具有继承性,可以继承synchronized修饰的方法，但子类方法不会有同步性，需加synchronized才有同步功能。
synchronized修饰的方法的弊端是方法执行时间长，阻止其他方法执行。synchronized(this){}同步块内的代码是同步执行的。
“synchronized(非this对象x)”格式的写法是是将x对象本身作监视器，这样就可以得出以下三个结论
1）当多个线程执行synchronized(x){}同步代码块时将有同步效果。
2）当其他线程执行x对象中的synchronized同步方法时将有同步效果。
3）当其他线程执行x对象方法里面的synchronized(this)代码块时也有呈现同步效果。
synchronized还可以用在static静态方法上，这样就是对当前java文件对象的Class类进制加锁。Class锁可以对类的所有对象实例起作用。
由于String常量池的原因，锁的是同一个对象。大多数情况下，同步synchronized代码块都不使用String作为锁对象，而改用其他，如new Object()实例化
一个Object对象。但它不放入常量池。
同步方法无限等待死锁时可用synchronized(object)来解决。
线程“死锁”会造成线和“假死”
如果内置类和外类不在同一个包中，要把内置类声明为public,实例化是OutClass.new InnerClass;还有一种是静态内置类。
在将任何数据类型作为同步锁时，需要注意的是，是否有多个线程同时持有锁对象，如果是同时持有相同的锁对象，则这些线程之间就是同步的（按顺序执行）;如
果是分别获得锁对象，这些线程之间就是异步的。
只要对象不变，对象的属性变了，运行的结果还是同步的。

关键字volatile,主要的作用是在多个线程中可见。
JVM设置为-server模式时是为了线程执行的效率，线程一直在私有堆栈中寻找值。这个时候就要吧用volatile使私有和公共的堆栈值同步。
volatile不是原子性的，如果在线程私有内存中read(load,use,assign)store,write，在其中的三个阶段，其他线程改写了就会出现脏数据。在多线程环境
中use,assign是多次出现的。对多线程访问同一实例变量还是需要加锁同步的。
或者还可以使用原子类实现i++操作。addAndGet()方法是原子的，但方法和方法之间的调用却不是原子的。这时需要同步处理。
synchronized代码块具有volatile功能。将线程工作中的私有内存同步到公共内存中去。
关键字synchronized可以保证同一时刻，只有一个线程可以执行一个某一个方法或某一个代码块。它包含两个特性，互斥性和可见性。“外练互斥，内修可见”

呈wait状态的线程也不是能马上获得锁，需要等到执行notify()方法的线程将程序执行完，也就是退出synchronized代码块后，当前线程才会释放锁。
wait使线程停止运行，而notify使停止的线程继续运行。

1）新创建一个线程对象后，再调用它的start()方法，系统会为此线程分配CPU资源，线程处于Runnable(可运行)状态，这是一个准备阶段，如果线程抢占到
CPU资源，线程就处于(Running)运行状态。
2）Runnable状态和Running状态可以相互切换，因为线程运行一段时间后，可能优先级更高的线程抢占了CPU资源，此时线程就从Running变成Runnable状态
线程进入Runnable状态大概分为5种情况。
调用sleep()方法后经过的时间超过了指定的休眠时间。(还占着CPU,wait()方法不占CPU，进入等待池)
线程调用的阻塞IO已经返回，阻塞方法执行完毕
线程成功的获得了试图同步的监视器
线程正在等待某个通知，其他线程发出了通知
处于挂起状态的线程调用了resume恢复方法
3）Blocked是阻塞的意思，例如遇到了一个IO操作，此时CPU处于空闲状态，可能分配给其它线程。Blocked状态结束后，线程进入Runnable状态。等待系统重
新分配资源。出现阻塞大概分为以下5种情况。
线程调用sleep()方法，它一直阻塞到时间结束之后或其它线程打断。
线程调用了阻塞式IO方法，要一直等待阻塞方法返回。如InputStream的read()方法，该方法一直阻塞到从流中读取最后一个字节为止，它可以无限阻塞，因此
不能超过阻塞时间。
试图获得一个同步监视器，但该同步监视器正被其他线程持有。（即等待获得synchronized语句必须的猜锁时阻塞）
线程在等待一个通知，即在执行一个wait方法时，阻塞到被notify唤醒。或设置了时间后的唤醒。
程序调用了suspend方法将线程挂起，容易死锁，已废弃。
4）run()方法运行结束后进入销毁阶段，整个线程执行完毕。
每个对象都有两个队列，一个是就绪队列，一个是阻塞队列。

当线程方法调用wait()方法后锁自动释放，但调用notify()方法后，锁却不自动释放。必须执行完notify所在的同步方法块后的代码后才释放锁。
当线程处于wait状态时，调用线程对象的interrupt()方法，会出现InterruptedException异常。
执行完同步代码块锁就会释放，在执行同步代码块的过程中遇到异常会线程中止，锁也会释放。在执行同步代码块的过程中，执行了锁所属对象的wait方法后，这
线程会释放对象锁，而此线程进入到线程等待池中，等待被唤醒。
调用一个notify()方法一次，只随机通知唤醒一个线程。notifyAll()方法可以唤醒所有等待的线程。
方法wait(long)是在这个时间内被唤醒，如果没有被唤醒，超过这个时间自动唤醒。
如果通知过早，则会打乱程序正常的运行逻辑。wait方法的等待线程不会被执行唤醒。
在使用wait/notify模式时，如果wait等待的条件发生了变化，也容易造成程序逻辑的混乱。
多生产与多消费者，notifyAll(),唤醒所有生产者与消费者。
生产者与消费者操作栈，List的最大容量是1，

利用管道在线程中通信，字节流

方法join()的作用就是等待线程对象销毁。具有使线程排队运行的作用，类似于synchronized的效果。join与synchronized的区别是:join在内部使用wait
方法进制等待，而synchronized关键字使用的是“对象监视器”原理作为同步。
在join过程中，如果当前对象被打断，则当前线程会出现异常，方法join()和方法interrupt()方法如果彼此遇到，则会出现异常。
join(long)的功能在内部是用wait(long)来实现的，所以join(long)具有释放锁的功能。而Thread.sleep(long)不释放锁
方法join()后面的代码提前运行：出现意外










