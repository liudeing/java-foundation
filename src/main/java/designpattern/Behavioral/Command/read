命令模式：将来自客户端的请求传入一个对象，无需了解这个请求激活的动作或有关接受这个请求的处理细节。
这是一种两台机器之间通讯性质的模式，类似传统语言的CallBack功能。
优点：
解耦了发送者和接收者的联系。接收者接收请求执行相应的动作，因为使用Command模式解耦，发送者无需知道接收者任何接口。
不少Command模式都是针对图形界面的，它实际就是菜单命令，我们在一个下拉菜单选择一个命令时，然后会执行一些动作。
将这些命令封装成在一个类中，然后用户(调用者)再对这个类进行操作，这就是Command模式，换句话来说，本来用户(调用者)是直接调用这些命令的，如菜单上
打开文档(调用者)，就直接指向打开文档的代码，使用了Command模式，就是在这两者之间增加一个中间者，将这种直接关系拗断，同时两者之间都隔离，基本没
关系了。
显然这样做的好处是符合封装的特性，降低耦合度，Command是将对行为进行封装的典型模式，Factory是将对创建进行封装的模式，从Command模式，我也发现
设计模式，有些复杂化，增加了第三者，但这样做也有利于代码的健壮性，可维护性和可复用性。

典型的Command模式需要有一个接口.接口中有一个统一的方法,这就是"将命令/请求封装为对象"

调用者基本只和接口打交道,不合具体实现交互,这也体现了一个原则,面向接口编程,