状态模式：将状态对象化,设立状态变换器,便可在状态中轻松切换.
定义：不同的状态，不同的行为;或者说，每个状态都有着相应的行为。
应用：适合“状态切换”，如if elseif else,这样的判断反复出现，可以考虑用状态模式。属性的改变，如数据库某字段，property,可能随时改变，也可用.
有开关切换的场合，像是把一个值切到A,B,C,像一个旋转开关，这种状态改变就可以状态模式了。
State适合巨大的具体行为
例如: 银行帐户, 经常会在Open 状态和Close状态间转换.
例如: 经典的TcpConnection, Tcp的状态有创建 侦听 关闭三个,并且反复转换,其创建 侦听 关闭的具体行为不是简单一两句就能完成的,适合使用State
例如:信箱POP帐号, 会有四种状态, start HaveUsername Authorized quit,每个状态对应的行为应该是比较大的.适合使用State
例如:在工具箱挑选不同工具,可以看成在不同工具中切换,适合使用State.如 具体绘图程序,用户可以选择不同工具绘制方框 直线 曲线,这种状态切换可以使用
State.
如何使用？
State需要两种类型实体参与：
1,state manager状态管理器，就是开关，在state manager有对状态的切换动作。
2,用抽象类或接口实现的父类,不同的状态就是继承这个父类的不同子类。
优点：
封装转换过程，也就是转换原则
枚举可能的状态，因此，需要事先确定状态种类

状态模式可以允许客户端改变状态的转换行为，而状态机则是能够自动改变状态，状态机是一个比较独立的而且复杂的机制，具体可参考一个状态机开源项目：
http://sourceforge.net/projects/smframework/
状态模式在工作流或游戏等各种系统中有大量使用，甚至是这些系统的核心功能设计，例如政府OA中，一个批文的状态有多种：未办；正在办理；正在批示；正在
审核；已经完成等各种状态，使用状态机可以封装这个状态的变化规则，从而达到扩充状态时，不必涉及到状态的使用者。

在网络游戏中，一个游戏活动存在开始；开玩；正在玩；输赢等各种状态，使用状态模式就可以实现游戏状态的总控，而游戏状态决定了游戏的各个方面，使用状态
模式可以对整个游戏架构功能实现起到决定的主导作用。

状态模式实质：
使用状态模式前，客户端外界需要介入改变状态，而状态改变的实现是琐碎或复杂的。
使用状态模式后，客户端外界可以直接使用事件Event实现，根本不必关心该事件导致如何状态变化，这些是由状态机等内部实现。
这是一种Event-condition-State，状态模式封装了condition-State部分。
每个状态形成一个子类，每个状态只关心它的下一个可能状态，从而无形中形成了状态转换的规则。如果新的状态加入，只涉及它的前一个状态修改和定义。
状态转换有几个方法实现：一个在每个状态实现next()，指定下一个状态；还有一种方法，设定一个StateOwner，在StateOwner设定stateEnter状态进入和
stateExit状态退出行为。
状态从一个方面说明了流程，流程是随时间而改变，状态是截取流程某个时间片。