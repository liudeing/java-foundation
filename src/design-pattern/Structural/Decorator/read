装饰模式：油漆工模式，油漆工（decorator）是用来刷漆的，那么被刷油漆的对象（decoratee）,这两种实休在装饰模式中是必需的。
定义：动态的给一个对象添加职责，就象在墙上刷油漆。使用Decorator模式相比生成子类在达到扩充功能的方式灵活。
为什么要用Decorator模式？
我们通常可以使用继承来实现功能的拓展，如果这些需要拓展的功能种类繁多，那么势必会生成很多子类，增加系统的复杂性，同时，使用继承实现功能拓展，我们
必须可以预见这些拓展功能，这些功能是编译时就确定了，是静态的。
使用Decorator的理由是：这些功能需要用户动态的决定加入的方式和时机。Decorator提供了“即插即用”的方法，在运行时何时增加何种功能。

如适配器模式中是打桩示例，在Adapter中有两种类：方形柱，圆形柱，Adapter模式展示如何综合使用这两个类，在Decorator模式中，我们是要在打桩时增加
一些额外的功能，比如，挖坑、在桩上钉上木板等，不关心如何使用两个不相关的类。